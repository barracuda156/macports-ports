--- frandom.c.orig	2023-02-24 05:51:27.000000000 +0800
+++ frandom.c	2023-08-24 17:11:55.000000000 +0800
@@ -16,7 +16,7 @@
 #include <stdlib.h>
 #include <stdio.h>
 #include <string.h>
-#include <asm/errno.h>
+#include <sys/errno.h>
 #include <unistd.h>
 //#include <assert.h>
 

--- libddr_null.c.orig	2015-04-15 16:56:38.000000000 +0800
+++ libddr_null.c	2023-08-24 16:52:16.000000000 +0800
@@ -11,6 +11,10 @@
 #include <string.h>
 #include <stdlib.h>
 
+#ifdef __APPLE__
+#include <stdint.h> /* __WORDSIZE */
+#endif
+
 /* fwd decl */
 extern ddr_plugin_t ddr_plug;
 
--- fmt_no.h.orig	2021-04-14 16:23:02.000000000 +0800
+++ fmt_no.h	2023-08-24 16:59:20.000000000 +0800
@@ -4,6 +4,11 @@
 #define _FMT_NO_H
 
 #include <sys/types.h>
+
+#ifndef loff_t
+typedef __darwin_off_t loff_t;
+#endif
+
 char* fmt_int_b(unsigned char pre, unsigned char post, unsigned int scale,
 		loff_t no, const char* bold, const int blen,
 		const char* norm, const int nlen,

--- random.c.orig	2022-07-25 23:45:07.000000000 +0800
+++ random.c	2023-08-24 17:22:09.000000000 +0800
@@ -26,6 +26,7 @@
 #if defined(__ANDROID_MIN_SDK_VERSION__) && __ANDROID_MIN_SDK_VERSION__ < 28
 #warning Compile with -target linux-aarch64-android28 or -target linux-arm-android28
 #endif
+#include <sys/types.h>
 #include <sys/random.h>
 #endif
 
--- ddr_ctrl.h.orig	2021-04-14 16:23:02.000000000 +0800
+++ ddr_ctrl.h	2023-08-24 17:28:11.000000000 +0800
@@ -10,6 +10,12 @@
 #ifndef _DDR_CTRL_H
 #define _DDR_CTRL_H
 
+#include <sys/types.h>
+
+#ifndef loff_t
+typedef __darwin_off_t loff_t;
+#endif
+
 /* Options */
 typedef struct _opt_t {
 	const char *iname, *oname, *lname, *bbname;

--- hash.h.orig	2015-04-15 16:56:38.000000000 +0800
+++ hash.h	2023-08-24 18:39:17.000000000 +0800
@@ -21,7 +21,6 @@
 		uint32_t sha1_h[5];
 		uint32_t sha256_h[8];
 		uint64_t sha512_h[8];
-		//uint64_t sha3_h[25];
 	};
 } hash_t ALIGNED(32);
 
--- libddr_hash.c.orig	2023-02-24 05:51:27.000000000 +0800
+++ libddr_hash.c	2023-08-24 21:15:15.000000000 +0800
@@ -35,7 +35,12 @@
 #include <fcntl.h>
 
 #include <netinet/in.h>	/* For ntohl/htonl */
-#include <endian.h>
+
+#ifdef __APPLE__
+#include <stdint.h> /* __WORDSIZE */
+#endif
+
+#include "dd_endian.h"
 
 #ifdef HAVE_SYS_XATTR_H
 #include <sys/xattr.h>
@@ -353,7 +358,8 @@
 		memset(ibuf, 0x36, blen);
 		memxor(ibuf, state->hmacpwd, state->hmacpln);
 		state->alg->hash_block(ibuf, &state->hmach);
-		memset(ibuf, 0, blen); asm("":::"memory");
+		memset(ibuf, 0, blen);
+		mem_clobber;
 	}
 	state->hash_pos = 0;
 
@@ -642,7 +648,7 @@
 				state->fname);
 		return -ENOENT;
 	}
-	if (setxattr(name, state->xattr_name, res, strlen(res), 0)) {
+	if (setxattr(name, state->xattr_name, res, strlen(res), 0, 0)) {
 		if (state->xfallback) {
 			int err = upd_chks(state->chkfnm, name, res, 0644);
 			snprintf(xatstr, 143, "chksum file %s", state->chkfnm);
@@ -677,7 +683,7 @@
 	}
 	/* Longest is 128byte hex for SHA512 (8x64byte numbers -> 8x16 digits) */
 	char chksum[144];
-	ssize_t itln = getxattr(name, state->xattr_name, chksum, 144);
+	ssize_t itln = getxattr(name, state->xattr_name, chksum, 144, 0, 0);
 	const int rln = strlen(res);
 	if (itln <= 0) {
 		if (state->xfallback) {

--- dd_rescue.c.orig	2023-02-24 05:51:27.000000000 +0800
+++ dd_rescue.c	2023-08-24 20:50:35.000000000 +0800
@@ -111,6 +111,10 @@
 #include <libgen.h>
 #include <assert.h>
 
+#ifdef __APPLE__
+#include <sys/types.h>
+#endif
+
 #include "random.h"
 #include "frandom.h"
 #include "list.h"
@@ -211,10 +215,18 @@
 
 #if defined(HAVE_REP_NOP) && (defined(__x86_64__) || defined(__i386__))
 # define cpu_relax() asm volatile ("rep nop":::"memory");
+#elif defined(__POWERPC__)
+# define cpu_relax() __asm__ volatile ("or r27,r27,r27" ::: "memory");
+#elif defined(__powerpc__)
+# define cpu_relax() __asm__ __volatile__ ("or 27,27,27" ::: "memory");
 #else
 # define cpu_relax() while (0) {}
 #endif
 
+#ifndef strdupa
+#define strdupa(__s) strcpy(alloca(strlen(__s)+1), __s)
+#endif
+
 
 /* fwd decls */
 int cleanup(char);
@@ -1292,7 +1304,7 @@
 #ifdef HAVE_XATTR
 {
 	char *attrs = NULL;
-	ssize_t aln = listxattr(inm, NULL, 0);
+	ssize_t aln = listxattr(inm, NULL, 0, 0);
 	int copied = 0;
 	if (aln <= 0)
 		return 0;
@@ -1301,7 +1313,7 @@
 		fplog(stderr, WARN, "Can't allocate buffer of len %z for attr names\n", aln);
 		return -1;
 	}
-	aln = listxattr(inm, attrs, aln);
+	aln = listxattr(inm, attrs, aln, 0);
 	if (aln <= 0) {
 		fplog(stderr, WARN, "Could not read attr list: %s\n", strerror(errno));
 		free(attrs);
@@ -1312,18 +1324,18 @@
 	assert(extrabuf);
 	int ebufall = 4096;
 	for (offs = 0; offs < aln; offs += 1+strlen(attrs+offs)) {
-		ssize_t itln = getxattr(inm, attrs+offs, NULL, 0);
+		ssize_t itln = getxattr(inm, attrs+offs, NULL, 0, 0, 0);
 		if (ebufall && itln > ebufall) {
 			extrabuf = (unsigned char*)realloc(extrabuf, itln);
 			assert(extrabuf);
 			ebufall = itln;
 		}
-		itln = getxattr(inm, attrs+offs, extrabuf, itln);
+		itln = getxattr(inm, attrs+offs, extrabuf, itln, 0, 0);
 		if (itln <= 0) {
 			fplog(stderr, WARN, "Could not read attr %s: %s\n", attrs+offs, strerror(errno));
 			continue;
 		}
-		if (setxattr(onm, attrs+offs, extrabuf, itln, 0))
+		if (setxattr(onm, attrs+offs, extrabuf, itln, 0, 0))
 			fplog(stderr, WARN, "Could not write attr %s: %s\n", attrs+offs, strerror(errno));
 		if (eptrs.opts->verbose)
 			fplog(stderr, INFO, "Copied attr %s (%i bytes)\n", attrs+offs, itln);

--- secmem.c.orig	2023-02-24 05:51:27.000000000 +0800
+++ secmem.c	2023-08-24 21:59:21.000000000 +0800
@@ -10,6 +10,7 @@
 #include <unistd.h>
 #include <errno.h>
 #include <sys/mman.h>
+#include <stddef.h>
 #ifdef HAVE_MALLOC_H
 # include <malloc.h>
 #endif

--- file_zblock.c.orig	2015-04-15 16:56:38.000000000 +0800
+++ file_zblock.c	2023-08-24 23:02:06.000000000 +0800
@@ -13,6 +13,14 @@
 #include <stdlib.h>
 #include <errno.h>
 
+#ifdef __APPLE__
+#include <stdint.h>
+#include <sys/types.h>
+#ifndef loff_t
+typedef __darwin_off_t loff_t;
+#endif
+#endif
+
 #include "find_nonzero.h"
 
 #define BUFSZ (64*1024)
