--- Makefile.orig	2023-02-24 16:28:08.000000000 +0800
+++ Makefile	2023-08-25 06:48:32.000000000 +0800
@@ -7,44 +7,45 @@
 DESTDIR = 
 SRCDIR ?= .
 
-CC = gcc
-SHELL = /bin/bash
+CC = @CC@
+SHELL ?= /bin/bash
 RPM_OPT_FLAGS ?= -Os -Wall -g -D_FORTIFY_SOURCE=2
-CFLAGS = $(RPM_OPT_FLAGS) $(EXTRA_CFLAGS) -DHAVE_CONFIG_H -I .
+CFLAGS = $(RPM_OPT_FLAGS) $(EXTRA_CFLAGS) -I@PREFIX@/libexec/openssl11/include @ARCHFLAGS@ -DHAVE_CONFIG_H -I .
 CFLAGS_OPT = $(CFLAGS) -O3
+EXTRA_LDFLAGS += -L@PREFIX@/libexec/openssl11/lib @ARCHFLAGS@
 INSTALL ?= install
-INSTALLFLAGS = -s
-prefix = $(DESTDIR)/usr
+#INSTALLFLAGS = -s
+prefix = $(DESTDIR)@PREFIX@
 INSTALLDIR = $(prefix)/bin
 #INSTALLDIR = $(DESTDIR)/bin
 INSTALLLIBDIR = $(prefix)/$(LIB)
 #INSTALLLIBDIR = $(DESTDIR)/$(LIBDIR)
 MANDIR = $(prefix)/share/man
-#MYDIR = dd_rescue-$(VERSION)
-MYDIR = dd_rescue
+MYDIR = dd_rescue-$(VERSION)
+#MYDIR = dd_rescue
 TMPDIR ?= /tmp
 BINTARGETS = dd_rescue 
-LIBTARGETS = libddr_hash.so libddr_MD5.so libddr_null.so libddr_crypt.so
+LIBTARGETS = libddr_hash.dylib libddr_MD5.dylib libddr_null.dylib libddr_crypt.dylib
 #TARGETS = libfalloc-dl
-OTHTARGETS = find_nonzero fiemap file_zblock fmt_no md5 sha256 sha512 sha224 sha384 sha1 test_aes # test_aligned_alloc
-ifneq ($(NO_ALIGNED_ALLOC),1)
-	OTHTARGETS += test_aligned_alloc
-endif
+OTHTARGETS = find_nonzero file_zblock fmt_no md5 sha256 sha512 sha224 sha384 sha1 test_aes
+#ifneq ($(NO_ALIGNED_ALLOC),1)
+#	OTHTARGETS += test_aligned_alloc
+#endif
 OBJECTS = random.o frandom.o fmt_no.o find_nonzero.o 
 FNZ_HEADERS = $(SRCDIR)/find_nonzero.h $(SRCDIR)/archdep.h $(SRCDIR)/ffs.h
 DDR_HEADERS = config.h $(SRCDIR)/random.h $(SRCDIR)/frandom.h $(SRCDIR)/list.h $(SRCDIR)/fmt_no.h $(SRCDIR)/find_nonzero.h $(SRCDIR)/archdep.h $(SRCDIR)/ffs.h $(SRCDIR)/fstrim.h $(SRCDIR)/ddr_plugin.h $(SRCDIR)/ddr_ctrl.h $(SRCDIR)/splice.h $(SRCDIR)/fallocate64.h $(SRCDIR)/pread64.h
 DOCDIR = $(prefix)/share/doc/packages
-INSTASROOT = -o root -g root
+#INSTASROOT = -o root -g root
 LIB = lib
-LIBDIR = /usr/$(LIB)
+LIBDIR = @PREFIX@/$(LIB)
 COMPILER = $(shell $(CC) --version | head -n1)
 ID = $(shell git describe --tags || cat REL-ID)
 DEFINES = -DVERSION=\"$(VERSION)\"  -D__COMPILER__="\"$(COMPILER)\"" -DID=\"$(ID)\" # -DPLUGSEARCH="\"$(LIBDIR)\""
 OUT = -o dd_rescue
 PIC = -fPIC
 PIE = -fPIE
-LDPIE = -pie
-RDYNAMIC = -rdynamic
+#LDPIE = -pie
+#RDYNAMIC = -rdynamic
 MAKE := $(MAKE) -f $(SRCDIR)/Makefile
 STRIP ?= strip
 
@@ -52,7 +53,7 @@
 HAVE_SHA256SUM = $(shell type -p sha256sum >/dev/null && echo 1 || echo 0)
 
 ifeq ($(shell grep 'HAVE_LZO_LZO1X_H 1' config.h >/dev/null 2>&1 && echo 1), 1)
-  LIBTARGETS += libddr_lzo.so
+  LIBTARGETS += libddr_lzo.dylib
   OTHTARGETS += fuzz_lzo
   HAVE_LZO=1
 else
@@ -161,7 +162,7 @@
 ifeq ($(HAVE_RDRND),1)
 	#OBJECTS2 += rdrand.o
 	#POBJECTS2 += rdrand.po
-	ARCHFLAGS +=  -mrdrnd
+	ARCHFLAGS += -mrdrnd
 else
 	CFLAGS += -DNO_RDRND 
 endif
@@ -176,7 +177,7 @@
 	AES_ARM64_O = aes_arm32.o
 	AES_ARM64_PO = aes_arm32.po
 	CFLAGS += -DHAVE_AES_ARM64
-	ARCHFLAGS += -mfpu=crypto-neon-fp-armv8
+	#ARCHFLAGS += -mfpu=crypto-neon-fp-armv8
 else
 ifeq (armv6,$(MACH))
 	OBJECTS2 = find_nonzero_arm.o
@@ -191,7 +192,7 @@
 	AES_ARM64_O = aes_arm64.o
 	AES_ARM64_PO = aes_arm64.po
 	CFLAGS += -DHAVE_AES_ARM64
-	ARCHFLAGS += -march=armv8-a+crypto
+	#ARCHFLAGS += -march=armv8-a+crypto
 endif
 
 OS = $(shell uname)
@@ -224,8 +225,12 @@
 
 # The headers for x86 intrinsics cause breakage while preprocessing 
 # for dependency generation :-( Workaround ...
-DEP_SSE = -D__AES__ -D__SSE4_1__ -D__SSSE3__ -D__SSE3__ -D__SSE2__ -D__SSE__ -D__MMX__ -DNO_WARN_X86_INTRINSICS
-ifneq (,$(filter $(MACH),ppc ppc64 ppc64le))
+# Workaround breaking the build â€“ comment it out.
+# DEP_SSE = -D__AES__ -D__SSE4_1__ -D__SSSE3__ -D__SSE3__ -D__SSE2__ -D__SSE__ -D__MMX__ -DNO_WARN_X86_INTRINSICS
+
+# uname -m should not be used.
+CPU := $(shell uname -p)
+ifneq (,$(filter $(CPU),powerpc))
 	DEP_SSE += -maltivec
 endif
 
@@ -289,19 +294,19 @@
 	$(CC) $(CFLAGS) $(PIC) -fstack-protector -o $@ -c $<
 
 # The plugins
-libddr_hash.so: libddr_hash.po md5.po sha256.po sha512.po sha1.po pbkdf2.po checksum_file.po
+libddr_hash.dylib: libddr_hash.po md5.po sha256.po sha512.po sha1.po pbkdf2.po checksum_file.po
 	$(CC) -shared -o $@ $^ $(EXTRA_LDFLAGS)
 
-libddr_MD5.so: libddr_hash.so
+libddr_MD5.dylib: libddr_hash.dylib
 	ln -sf $< $@
 
-libddr_lzo.so: libddr_lzo.po
+libddr_lzo.dylib: libddr_lzo.po
 	$(CC) -shared -o $@ $^ -llzo2
 
-libddr_null.so: libddr_null.po
+libddr_null.dylib: libddr_null.po
 	$(CC) -shared -o $@ $^
 
-libddr_crypt.so: libddr_crypt.po aes.po aes_c.po $(AESNI_PO) $(AES_ARM64_PO) $(AES_OSSL_PO) pbkdf2.po sha256.po pbkdf_ossl.po md5.po checksum_file.po secmem.po random.po $(POBJECTS2)
+libddr_crypt.dylib: libddr_crypt.po aes.po aes_c.po $(AESNI_PO) $(AES_ARM64_PO) $(AES_OSSL_PO) pbkdf2.po sha256.po pbkdf_ossl.po md5.po checksum_file.po secmem.po random.po $(POBJECTS2)
 	$(CC) -shared -o $@ $^ $(CRYPTOLIB) $(EXTRA_LDFLAGS)
 
 # More special compiler flags
@@ -321,10 +326,10 @@
 	$(CC) $(CFLAGS_OPT) $(PIC) -o $@ -c $<
 
 find_nonzero_arm64.o: $(SRCDIR)/find_nonzero_arm64.c
-	$(CC) $(CFLAGS_OPT) -march=armv8-a+crypto $(PIE) -c $< 
+	$(CC) $(CFLAGS_OPT) $(ARCHFLAGS) $(PIE) -c $< 
 
 find_nonzero_arm64.po: $(SRCDIR)/find_nonzero_arm64.c
-	$(CC) $(CFLAGS_OPT) -march=armv8-a+crypto $(PIC) -o $@ -c $< 
+	$(CC) $(CFLAGS_OPT) $(ARCHFLAGS) $(PIC) -o $@ -c $< 
 
 find_nonzero_main.o: $(SRCDIR)/find_nonzero.c config.h $(FNZ_HEADERS)
 	$(CC) $(CFLAGS_OPT) $(PIE) -o $@ -c $< -DTEST 
@@ -344,49 +349,49 @@
 else
 ifeq ($(HAVE_RDRND),1)
 rdrand.o: $(SRCDIR)/rdrand.c
-	$(CC) $(CFLAGS) $(PIE) -mrdrnd -maes -msse4.1 -c $<
+	$(CC) $(CFLAGS) $(PIE) -mrdrnd -c $<
 
 rdrand.po: $(SRCDIR)/rdrand.c
-	$(CC) $(CFLAGS) $(PIC) -mrdrnd -maes -msse4.1 -o $@ -c $<
+	$(CC) $(CFLAGS) $(PIC) -mrdrnd -o $@ -c $<
 else
 rdrand.o: $(SRCDIR)/rdrand.c
-	$(CC) $(CFLAGS) $(PIE) -maes -msse4.1 -c $<
+	$(CC) $(CFLAGS) $(PIE) -c $<
 
 rdrand.po: $(SRCDIR)/rdrand.c
-	$(CC) $(CFLAGS) $(PIC) -maes -msse4.1 -o $@ -c $<
+	$(CC) $(CFLAGS) $(PIC) -o $@ -c $<
 endif
 endif
 
 # TODO: Build binaries from .o file, so we can save some special rules ...
 # Special dd_rescue variants
 libfalloc: $(SRCDIR)/dd_rescue.c $(DDR_HEADERS) $(OBJECTS) $(OBJECTS2)
-	$(CC) $(CFLAGS) $(PIE) $(LDPIE) -DNO_LIBDL $(DEFINES) $< $(OUT) $(OBJECTS) $(OBJECTS2) -lfallocate $(EXTRA_LDFLAGS) $(RDYNAMIC)
+	$(CC) $(CFLAGS) $(PIE) -DNO_LIBDL $(DEFINES) $< $(OUT) $(OBJECTS) $(OBJECTS2) -lfallocate $(EXTRA_LDFLAGS)
 
 libfalloc-static: $(SRCDIR)/dd_rescue.c $(DDR_HEADERS) $(OBJECTS) $(OBJECTS2)
-	$(CC) $(CFLAGS) $(PIE) $(LDPIE) -DNO_LIBDL $(DEFINES) $< $(OUT) $(OBJECTS) $(OBJECTS2) $(LIBDIR)/libfallocate.a $(EXTRA_LDFLAGS) $(RDYNAMIC)
+	$(CC) $(CFLAGS) $(PIE) -DNO_LIBDL $(DEFINES) $< $(OUT) $(OBJECTS) $(OBJECTS2) $(LIBDIR)/libfallocate.a $(EXTRA_LDFLAGS)
 
 # This is the default built
 dd_rescue: $(SRCDIR)/dd_rescue.c $(DDR_HEADERS) $(OBJECTS) $(OBJECTS2)
-	$(CC) $(CFLAGS) $(PIE) $(LDPIE) $(DEFINES) $< $(OUT) $(OBJECTS) $(OBJECTS2) -ldl $(EXTRA_LDFLAGS) $(RDYNAMIC)
+	$(CC) $(CFLAGS) $(PIE) $(DEFINES) $< $(OUT) $(OBJECTS) $(OBJECTS2) -ldl $(EXTRA_LDFLAGS)
 
 # Test programs 
 md5: $(SRCDIR)/md5.c $(SRCDIR)/md5.h $(SRCDIR)/hash.h config.h
-	$(CC) $(CFLAGS_OPT) $(PIE) $(LDPIE) -DMD5_MAIN -o $@ $<
+	$(CC) $(CFLAGS_OPT) $(PIE) -DMD5_MAIN -o $@ $<
 
 sha256: $(SRCDIR)/sha256.c $(SRCDIR)/sha256.h $(SRCDIR)/hash.h config.h
-	$(CC) $(CFLAGS_OPT) $(PIE) $(LDPIE) -DSHA256_MAIN -o $@ $<
+	$(CC) $(CFLAGS_OPT) $(PIE) -DSHA256_MAIN -o $@ $<
 
 sha224: sha256
 	ln -sf sha256 sha224
 
 sha512: $(SRCDIR)/sha512.c $(SRCDIR)/sha512.h $(SRCDIR)/hash.h config.h
-	$(CC) $(CFLAGS_OPT) $(PIE) $(LDPIE) -DSHA512_MAIN -o $@ $<
+	$(CC) $(CFLAGS_OPT) $(PIE) -DSHA512_MAIN -o $@ $<
 	
 sha384: sha512
 	ln -sf sha512 sha384
 
 sha1: $(SRCDIR)/sha1.c $(SRCDIR)/sha1.h $(SRCDIR)/hash.h config.h
-	$(CC) $(CFLAGS_OPT) $(PIE) $(LDPIE) -DSHA1_MAIN -o $@ $<
+	$(CC) $(CFLAGS_OPT) $(PIE) -DSHA1_MAIN -o $@ $<
 
 fuzz_lzo: fuzz_lzo.o
 	$(CC) -o $@ $(LDPIE) $^ -llzo2
@@ -398,7 +403,7 @@
 	$(CC) $(CFLAGS) -DNO_LIBDL -DNO_LIBFALLOCATE $(DEFINES) $< $(OUT) $(OBJECTS) $(OBJECTS2)
 
 nocolor: $(SRCDIR)/dd_rescue.c $(DDR_HEADERS) $(OBJECTS) $(OBJECTS2)
-	$(CC) $(CFLAGS) -DNO_COLORS=1 $(DEFINES) $< $(OUT) $(OBJECTS) $(OBJECTS2) $(EXTRA_LDFLAGS) $(RDYNAMIC)
+	$(CC) $(CFLAGS) -DNO_COLORS=1 $(DEFINES) $< $(OUT) $(OBJECTS) $(OBJECTS2) $(EXTRA_LDFLAGS)
 
 static: $(SRCDIR)/dd_rescue.c $(DDR_HEADERS) $(OBJECTS)
 	$(CC) $(CFLAGS) -DNO_LIBDL -DNO_LIBFALLOCATE -static $(DEFINES) $< $(OUT) $(OBJECTS) $(OBJECTS2) $(EXTRA_LDFLAGS)
@@ -415,22 +420,22 @@
 
 # More test programs
 find_nonzero: find_nonzero_main.o $(OBJECTS2)
-	$(CC) $(CFLAGS_OPT) $(PIE) $(LDPIE) -o $@ $^ 
+	$(CC) $(CFLAGS_OPT) $(PIE) -o $@ $^ 
 
 fmt_no: $(SRCDIR)/fmt_no.c $(SRCDIR)/fmt_no.h
-	$(CC) $(CFLAGS) $(PIE) $(LDPIE) -o $@ $< -DTEST
+	$(CC) $(CFLAGS) $(PIE) -o $@ $< -DTEST
 
 file_zblock: $(SRCDIR)/file_zblock.c $(FNZ_HEADERS) config.h find_nonzero.o $(OBJECTS2)
-	$(CC) $(CFLAGS) $(PIE) $(LDPIE) -o $@ $< find_nonzero.o $(OBJECTS2)
+	$(CC) $(CFLAGS) $(PIE) -o $@ $< find_nonzero.o $(OBJECTS2)
 
-fiemap: $(SRCDIR)/fiemap.c $(SRCDIR)/fiemap.h $(SRCDIR)/fstrim.h config.h fstrim.o
-	$(CC) $(CFLAGS) $(PIE) $(LDPIE) -DTEST_FIEMAP -o $@ $< fstrim.o
+#fiemap: $(SRCDIR)/fiemap.c $(SRCDIR)/fiemap.h $(SRCDIR)/fstrim.h config.h fstrim.o
+#	$(CC) $(CFLAGS) $(PIE) -DTEST_FIEMAP -o $@ $< fstrim.o
 
 pbkdf2: $(SRCDIR)/ossl_pbkdf2.c
-	$(CC) $(CFLAGS) $(PIE) $(LDPIE) -o $@ $< $(CRYPTOLIB)
+	$(CC) $(CFLAGS) $(PIE) -o $@ $< $(CRYPTOLIB)
 
 test_aes: $(SRCDIR)/test_aes.c $(AESNI_O) $(AES_ARM64_O) aes_c.o secmem.o sha256.o find_nonzero.o $(AES_OSSL_O) aes.o $(SRCDIR)/aesni.h $(SRCDIR)/aes_arm64.h config.h $(OBJECTS2)
-	$(CC) $(CFLAGS) $(PIE) $(LDPIE) $(DEF) -o $@ $< $(AESNI_O) $(AES_ARM64_O) aes_c.o secmem.o sha256.o $(AES_OSSL_O) aes.o find_nonzero.o $(OBJECTS2) $(CRYPTOLIB)
+	$(CC) $(CFLAGS) $(PIE) $(DEF) -o $@ $< $(AESNI_O) $(AES_ARM64_O) aes_c.o secmem.o sha256.o $(AES_OSSL_O) aes.o find_nonzero.o $(OBJECTS2) $(CRYPTOLIB)
 
 # Special optimized versions
 ifeq ($(HAVE_AVX2),1)
@@ -474,7 +479,7 @@
 	rm -f dd_rescue-?.??.tar.bz2
 
 dist: distclean
-	#tar cvzf ../dd_rescue-$(VERSION).tar.gz -C.. --exclude=$(MYDIR)/CV* --exclude $(MYDIR)/dd_rescue2* --exclude $(MYDIR)/.* --exclude $(MYDIR)/*.i --exclude $(MYDIR)/*~ --exclude $(MYDIR)*.S --exclude $(MYDIR)/*_32 --exclude $(MYDIR)/*_64 --exclude $(MYDIR)/*_android --exclude $(MYDIR)/*.o --exclude $(MYDIR)/*.po --exclude $(MYDaIR)/*.so $(MYDIR) 
+	#tar cvzf ../dd_rescue-$(VERSION).tar.gz -C.. --exclude=$(MYDIR)/CV* --exclude $(MYDIR)/dd_rescue2* --exclude $(MYDIR)/.* --exclude $(MYDIR)/*.i --exclude $(MYDIR)/*~ --exclude $(MYDIR)*.S --exclude $(MYDIR)/*_32 --exclude $(MYDIR)/*_64 --exclude $(MYDIR)/*_android --exclude $(MYDIR)/*.o --exclude $(MYDIR)/*.po --exclude $(MYDaIR)/*.dylib $(MYDIR) 
 	#cd .. && tar cvzf dd_rescue-$(VERSION).tar.gz $(MYDIR)/*.c $(MYDIR)/*.h $(MYDIR)/*.in $(MYDIR)/Makefile* $(MYDIR)/*.sh $(MYDIR)/*.1 $(MYDIR)/COPYING $(MYDIR)/README*
 	mkdir dd_rescue-$(VERSION)
 	git describe --tags > dd_rescue-$(VERSION)/REL-ID
@@ -484,15 +489,15 @@
 
 install: $(TARGETS)
 	mkdir -p $(INSTALLDIR)
-	$(INSTALL) $(INSTALLFLAGS) $(INSTASROOT) -m 755 $(BINTARGETS) $(INSTALLDIR)
+	$(INSTALL) $(INSTASROOT) -m 755 $(BINTARGETS) $(INSTALLDIR)
 	#$(INSTALL) $(INSTASROOT) -m 755 -d $(DOCDIR)/dd_rescue
 	#$(INSTALL) $(INSTASROOT) -g root -m 644 README.dd_rescue $(DOCDIR)/dd_rescue/
 	mkdir -p $(INSTALLLIBDIR)
-	$(INSTALL) $(INSTALLFLAGS) $(INSTASROOT) -m 755 $(LIBTARGETS) $(INSTALLLIBDIR)
-	ln -sf libddr_hash.so $(INSTALLLIBDIR)/libddr_MD5.so
-	mkdir -p $(MANDIR)/man1
-	$(INSTALL) $(INSTASROOT) -m 644 dd_rescue.1 ddr_lzo.1 ddr_crypt.1 $(MANDIR)/man1/
-	gzip -9f $(MANDIR)/man1/dd_rescue.1 $(MANDIR)/man1/ddr_lzo.1 $(MANDIR)/man1/ddr_crypt.1
+	$(INSTALL) $(INSTASROOT) -m 755 $(LIBTARGETS) $(INSTALLLIBDIR)
+	ln -sf libddr_hash.dylib $(INSTALLLIBDIR)/libddr_MD5.dylib
+	mkdir -p $(MANDIR)/dd_rescue
+	$(INSTALL) $(INSTASROOT) -m 644 dd_rescue.1 ddr_lzo.1 ddr_crypt.1 $(MANDIR)/dd_rescue/
+	gzip -9f $(MANDIR)/dd_rescue/dd_rescue.1 $(MANDIR)/dd_rescue/ddr_lzo.1 $(MANDIR)/dd_rescue/ddr_crypt.1
 
 check: $(TARGETS) find_nonzero md5 sha1 sha256 sha512 fmt_no
 	@echo "make check ... Pass VG=\"valgrind --options\" to use with valgrind"
@@ -542,19 +547,19 @@
 	OLDDT=`date +%s`; $(VG) ./dd_rescue -m 64M -C 20M /dev/zero /dev/null; DT=`date +%s`; ARCH=$$(uname -m); test $$(($$DT-$$OLDDT)) = 3 -o $$(($$DT-$$OLDDT)) = 4 || test $$(($$DT-$$OLDDT)) -ge 5 -a $${ARCH:0:3} = ppc
 	@echo "***** dd_rescue MD5 plugin tests *****"
 	$(VG) ./md5 /dev/null
-	$(VG) ./md5 /dev/null | md5sum -c
+	$(VG) ./md5 /dev/null | @PREFIX@/libexec/gnubin/md5sum -c
 	$(VG) ./dd_rescue -a -b 16k -l TEST.log -o BB.log -m 32k /dev/zero TEST
 	$(VG) ./dd_rescue -a -b 16k -m 32k /dev/zero TEST
 	$(VG) ./dd_rescue -x -a -b 16k -m32k dd_rescue TEST
 	$(VG) ./dd_rescue -x -a -b 16k -m17k /dev/zero TEST
-	$(VG) ./dd_rescue -c0 -a -b16k -t -L ./libddr_MD5.so=output TEST TEST2 >HASH.TEST
-	md5sum -c HASH.TEST
-	#MD5=$$(./dd_rescue -c0 -a -b16k -L ./libddr_MD5.so TEST TEST2 2>&1 | grep 'MD5(0)': | tail -n1 | sed 's/^dd_rescue: (info): MD5(0):[^:]*: //'); MD5S=$$(md5sum TEST | sed 's/ .*$$//'); echo $$MD5 $$MD5S; if test "$$MD5" != "$$MD5S"; then false; fi
+	$(VG) ./dd_rescue -c0 -a -b16k -t -L ./libddr_MD5.dylib=output TEST TEST2 >HASH.TEST
+	@PREFIX@/libexec/gnubin/md5sum -c HASH.TEST
+	#MD5=$$(./dd_rescue -c0 -a -b16k -L ./libddr_MD5.dylib TEST TEST2 2>&1 | grep 'MD5(0)': | tail -n1 | sed 's/^dd_rescue: (info): MD5(0):[^:]*: //'); MD5S=$$(md5sum TEST | sed 's/ .*$$//'); echo $$MD5 $$MD5S; if test "$$MD5" != "$$MD5S"; then false; fi
 	rm -f HASH.TEST
 	$(VG) ./sha1 /dev/null
-	$(VG) ./sha1 /dev/null | sha1sum -c
-	$(VG) ./dd_rescue -c0 -a -b16k -t -L ./libddr_hash.so=outnm=HASH.TEST:alg=sha1 TEST TEST2
-	sha1sum -c HASH.TEST
+	$(VG) ./sha1 /dev/null | @PREFIX@/libexec/gnubin/sha1sum -c
+	$(VG) ./dd_rescue -c0 -a -b16k -t -L ./libddr_hash.dylib=outnm=HASH.TEST:alg=sha1 TEST TEST2
+	@PREFIX@/libexec/gnubin/sha1sum -c HASH.TEST
 	if test $(HAVE_SHA256SUM) = 1; then $(MAKE) check_sha2; fi
 	$(VG) ./sha256 /dev/null
 	$(VG) ./sha512 /dev/null
@@ -564,7 +569,7 @@
 	#if test $(HAVE_LZO) = 1; then $(MAKE) check_lzo_test; fi
 	if test $(HAVE_LZO) = 1; then $(MAKE) check_lzo_fuzz; fi
 	# Tests for libddr_null
-	$(VG) ./dd_rescue  -L ./libddr_null.so=debug dd_rescue /dev/null
+	$(VG) ./dd_rescue  -L ./libddr_null.dylib=debug dd_rescue /dev/null
 	# Hash tests with set_xattr and chk_xattr
 	if test $(HAVE_XATTR) = 1; then $(MAKE) check_xattr_storehash; fi
 	# Extra xattrs (should be preserved)
@@ -572,7 +577,7 @@
 	# Tests with HMAC
 	echo "what do ya want for nothing?" > TEST
 	echo "09d6428f7ebaf21a6b53d86c9699cca0 *TEST" > HMACS.md5
-	if test `stat -c %s TEST` == 29; then $(VG) ./dd_rescue -L ./libddr_hash.so=md5:hmacpwd=Jefe:chknm= TEST /dev/null; else echo "WARN: TEST file has unexpected size, skipping HMAC test"; hexdump -C TEST; fi
+	if test `stat -c %s TEST` == 29; then $(VG) ./dd_rescue -L ./libddr_hash.dylib=md5:hmacpwd=Jefe:chknm= TEST /dev/null; else echo "WARN: TEST file has unexpected size, skipping HMAC test"; hexdump -C TEST; fi
 	rm -f /tmp/dd_rescue CHECKSUMS.sha512 TEST HMACS.md5
 	if ./calchmac.py sha1 pass dd_rescue; then $(MAKE) check_hmac; else echo "Sorry, no more HMAC test due to missing python-hashlib support"; true; fi
 	$(MAKE) check_fault
@@ -581,13 +586,13 @@
 
 check_xattr_storehash: $(TARGETS)
 	# Tests with hash set_xattr and chk_xattr (with fallback as not all filesystems support xattrs ...)
-	$(VG) ./dd_rescue -tL ./libddr_hash.so=sha256:set_xattr:fallback dd_rescue $(TMPDIR)/dd_rescue
-	$(VG) ./dd_rescue  -L ./libddr_hash.so=sha256:chk_xattr:fallback $(TMPDIR)/dd_rescue /dev/null
+	$(VG) ./dd_rescue -tL ./libddr_hash.dylib=sha256:set_xattr:fallback dd_rescue $(TMPDIR)/dd_rescue
+	$(VG) ./dd_rescue  -L ./libddr_hash.dylib=sha256:chk_xattr:fallback $(TMPDIR)/dd_rescue /dev/null
 	rm -f $(TMPDIR)/dd_rescue CHECKSUMS.sha256
 	# Tests with prepend and append
-	$(VG) ./dd_rescue -tL ./libddr_hash.so=sha512:set_xattr:fallback:prepend=abc:append=xyz dd_rescue $(TMPDIR)/dd_rescue
-	$(VG) ./dd_rescue  -L ./libddr_hash.so=sha512:chk_xattr:fallback $(TMPDIR)/dd_rescue /dev/null && false || true
-	$(VG) ./dd_rescue  -L ./libddr_hash.so=sha512:chk_xattr:fallback:prepend=abc:append=xyz $(TMPDIR)/dd_rescue /dev/null
+	$(VG) ./dd_rescue -tL ./libddr_hash.dylib=sha512:set_xattr:fallback:prepend=abc:append=xyz dd_rescue $(TMPDIR)/dd_rescue
+	$(VG) ./dd_rescue  -L ./libddr_hash.dylib=sha512:chk_xattr:fallback $(TMPDIR)/dd_rescue /dev/null && false || true
+	$(VG) ./dd_rescue  -L ./libddr_hash.dylib=sha512:chk_xattr:fallback:prepend=abc:append=xyz $(TMPDIR)/dd_rescue /dev/null
 	rm -f $(TMPDIR)/dd_rescue CHECKSUMS.sha512
 
 # FIXME: This fails on filesystems without xattr support - disabled until we know how to handle this
@@ -595,20 +600,20 @@
 	$(VG) ./dd_rescue -pt dd_rescue dd_rescue.cmp
 	attr -s testattr -V testval dd_rescue.cmp
 	attr -qg testattr dd_rescue.cmp > attr
-	$(VG) ./dd_rescue -pt -L ./libddr_hash.so=sha256:set_xattr dd_rescue.cmp dd_rescue.cmp2
+	$(VG) ./dd_rescue -pt -L ./libddr_hash.dylib=sha256:set_xattr dd_rescue.cmp dd_rescue.cmp2
 	attr -qg testattr dd_rescue.cmp2 > attr2
 	cmp attr attr2
 	rm attr attr2 dd_rescue.cmp dd_rescue.cmp2
 
 
 check_hmac: $(TARGETS)
-	FILES="$(SRCDIR)/*.c $(SRCDIR)/*.h *.po dd_rescue *.so"; \
+	FILES="$(SRCDIR)/*.c $(SRCDIR)/*.h *.po dd_rescue *.dylib"; \
 	for alg in md5 sha1 sha256 sha384; do \
 		./calchmac.py $$alg pass_$$alg $$FILES > HMACS.$$alg; \
 	done
-	for name in $(SRCDIR)/*.c $(SRCDIR)/*.h *.po dd_rescue *.so; do \
+	for name in $(SRCDIR)/*.c $(SRCDIR)/*.h *.po dd_rescue *.dylib; do \
 		for alg in md5 sha1 sha256 sha384; do \
-			$(VG) ./dd_rescue -L ./libddr_hash.so=$$alg:hmacpwd=pass_$$alg:chknm= $$name /dev/null || exit 1; \
+			$(VG) ./dd_rescue -L ./libddr_hash.dylib=$$alg:hmacpwd=pass_$$alg:chknm= $$name /dev/null || exit 1; \
 		done \
 	done
 	rm -f HMACS.md5 HMACS.sha1 HMACS.sha256 HMACS.sha384
@@ -616,76 +621,76 @@
 	
 check_sha2: $(TARGETS) sha224 sha384
 	rm -f CHECKSUMS.sha256 CHECKSUMS.sha512
-	$(VG) ./dd_rescue -c0 -a -b16k -t -L ./libddr_hash.so=output:alg=sha224 TEST TEST2 >HASH.TEST
-	sha224sum -c HASH.TEST
-	$(VG) ./dd_rescue -c0 -a -b16k -t -L ./libddr_hash.so=outnm=:alg=sha256 TEST TEST2 >HASH.TEST
-	sha256sum -c CHECKSUMS.sha256
-	$(VG) ./dd_rescue -c0 -a -b16k -t -L ./libddr_hash.so=output:alg=sha384 TEST TEST2 >HASH.TEST
-	sha384sum -c HASH.TEST
-	$(VG) ./dd_rescue -c0 -a -b16k -t -L ./libddr_hash.so=outnm=:alg=sha512 TEST TEST2
-	$(VG) ./dd_rescue -c0 -a -b16k -t -L ./libddr_hash.so=outnm=:alg=sha512,./libddr_null.so=change dd_rescue /dev/null
-	sha512sum -c CHECKSUMS.sha512
-	$(VG) ./dd_rescue -c0 -a -b16k -t -L ./libddr_hash.so=sha512:chknm=CHECKSUMS.sha512 TEST2 /dev/null
-	$(VG) ./dd_rescue -c0 -a -b16k -t -L ./libddr_hash.so=alg=sha512:chknm= dd_rescue /dev/null
-	$(VG) ./dd_rescue -c0 -a -b16k -t -L ./libddr_hash.so=sha512:check dd_rescue /dev/null <CHECKSUMS.sha512
-	$(VG) ./sha224 /dev/null | sha224sum -c
-	$(VG) ./sha256 /dev/null | sha256sum -c
-	$(VG) ./sha384 /dev/null | sha384sum -c
-	$(VG) ./sha512 /dev/null | sha512sum -c
-	$(VG) ./dd_rescue -q -c0 -a -b16k -t -L ./libddr_hash.so=sha256:outnm=- TEST2 /dev/null | $(VG) ./dd_rescue -c0 -a -b16k -t -L ./libddr_hash.so=sha256:chknm=- TEST2 /dev/null
+	$(VG) ./dd_rescue -c0 -a -b16k -t -L ./libddr_hash.dylib=output:alg=sha224 TEST TEST2 >HASH.TEST
+	@PREFIX@/libexec/gnubin/sha224sum -c HASH.TEST
+	$(VG) ./dd_rescue -c0 -a -b16k -t -L ./libddr_hash.dylib=outnm=:alg=sha256 TEST TEST2 >HASH.TEST
+	@PREFIX@/libexec/gnubin/sha256sum -c CHECKSUMS.sha256
+	$(VG) ./dd_rescue -c0 -a -b16k -t -L ./libddr_hash.dylib=output:alg=sha384 TEST TEST2 >HASH.TEST
+	@PREFIX@/libexec/gnubin/sha384sum -c HASH.TEST
+	$(VG) ./dd_rescue -c0 -a -b16k -t -L ./libddr_hash.dylib=outnm=:alg=sha512 TEST TEST2
+	$(VG) ./dd_rescue -c0 -a -b16k -t -L ./libddr_hash.dylib=outnm=:alg=sha512,./libddr_null.dylib=change dd_rescue /dev/null
+	@PREFIX@/libexec/gnubin/sha512sum -c CHECKSUMS.sha512
+	$(VG) ./dd_rescue -c0 -a -b16k -t -L ./libddr_hash.dylib=sha512:chknm=CHECKSUMS.sha512 TEST2 /dev/null
+	$(VG) ./dd_rescue -c0 -a -b16k -t -L ./libddr_hash.dylib=alg=sha512:chknm= dd_rescue /dev/null
+	$(VG) ./dd_rescue -c0 -a -b16k -t -L ./libddr_hash.dylib=sha512:check dd_rescue /dev/null <CHECKSUMS.sha512
+	$(VG) ./sha224 /dev/null | @PREFIX@/libexec/gnubin/sha224sum -c
+	$(VG) ./sha256 /dev/null | @PREFIX@/libexec/gnubin/sha256sum -c
+	$(VG) ./sha384 /dev/null | @PREFIX@/libexec/gnubin/sha384sum -c
+	$(VG) ./sha512 /dev/null | @PREFIX@/libexec/gnubin/sha512sum -c
+	$(VG) ./dd_rescue -q -c0 -a -b16k -t -L ./libddr_hash.dylib=sha256:outnm=- TEST2 /dev/null | $(VG) ./dd_rescue -c0 -a -b16k -t -L ./libddr_hash.dylib=sha256:chknm=- TEST2 /dev/null
 	rm -f HASH.TEST CHECKSUMS.sha256 CHECKSUMS.sha512 TEST2
 
 check_lzo: $(TARGETS)
 	@echo "***** dd_rescue lzo (and MD5) plugin tests *****"
-	$(VG) ./dd_rescue -b32k -ATL ./libddr_lzo.so dd_rescue dd_rescue.ddr.lzo
+	$(VG) ./dd_rescue -b32k -ATL ./libddr_lzo.dylib dd_rescue dd_rescue.ddr.lzo
 	$(LZOP) -t dd_rescue.ddr.lzo
 	@cp -p dd_rescue dd_rescue.ddr
 	$(LZOP) -fd dd_rescue.ddr.lzo
 	cmp dd_rescue dd_rescue.ddr
 	@rm -f dd_rescue.ddr dd_rescue.ddr.lzo
-	$(VG) ./dd_rescue -b256k -L ./libddr_MD5.so=output,./libddr_lzo.so=compress,./libddr_MD5.so=output dd_rescue dd_rescue.ddr.lzo > dd_rescue.ddr.MD5SUM
-	md5sum -c dd_rescue.ddr.MD5SUM
-	md5sum dd_rescue dd_rescue.ddr.lzo
+	$(VG) ./dd_rescue -b256k -L ./libddr_MD5.dylib=output,./libddr_lzo.dylib=compress,./libddr_MD5.dylib=output dd_rescue dd_rescue.ddr.lzo > dd_rescue.ddr.MD5SUM
+	@PREFIX@/libexec/gnubin/md5sum -c dd_rescue.ddr.MD5SUM
+	@PREFIX@/libexec/gnubin/md5sum dd_rescue dd_rescue.ddr.lzo
 	$(LZOP) -Nvl dd_rescue.ddr.lzo
-	$(VG) ./dd_rescue -b256k -TL ./libddr_MD5.so=output,./libddr_lzo.so=compress,./libddr_MD5.so,./libddr_lzo.so=decompress,./libddr_MD5.so=outfd=1 dd_rescue dd_rescue.ddr > dd_rescue.ddr.MD5
+	$(VG) ./dd_rescue -b256k -TL ./libddr_MD5.dylib=output,./libddr_lzo.dylib=compress,./libddr_MD5.dylib,./libddr_lzo.dylib=decompress,./libddr_MD5.dylib=outfd=1 dd_rescue dd_rescue.ddr > dd_rescue.ddr.MD5
 	cmp dd_rescue dd_rescue.ddr
-	md5sum -c dd_rescue.ddr.MD5
-	$(VG) ./dd_rescue -b16k -TL ./libddr_MD5.so=output,./libddr_lzo.so=compress,./libddr_MD5.so,./libddr_lzo.so=decompress,./libddr_MD5.so=outfd=1 dd_rescue dd_rescue.ddr > dd_rescue.ddr.MD5
+	@PREFIX@/libexec/gnubin/md5sum -c dd_rescue.ddr.MD5
+	$(VG) ./dd_rescue -b16k -TL ./libddr_MD5.dylib=output,./libddr_lzo.dylib=compress,./libddr_MD5.dylib,./libddr_lzo.dylib=decompress,./libddr_MD5.dylib=outfd=1 dd_rescue dd_rescue.ddr > dd_rescue.ddr.MD5
 	cmp dd_rescue dd_rescue.ddr
-	md5sum -c dd_rescue.ddr.MD5
+	@PREFIX@/libexec/gnubin/md5sum -c dd_rescue.ddr.MD5
 	@cp -p dd_rescue.ddr.lzo dd_rescue.lzo
 	@rm -f dd_rescue.ddr dd_rescue.ddr.lzo dd_rescue.ddr.MD5
 	$(LZOP) -f dd_rescue
-	$(VG) ./dd_rescue -b256k -TL ./libddr_lzo.so dd_rescue.lzo dd_rescue.cmp
+	$(VG) ./dd_rescue -b256k -TL ./libddr_lzo.dylib dd_rescue.lzo dd_rescue.cmp
 	cmp dd_rescue dd_rescue.cmp
 	@rm -f dd_rescue.cmp dd_rescue.lzo
-	$(VG) ./dd_rescue -b16k -L ./libddr_MD5.so=output,./libddr_lzo.so,./libddr_MD5.so=output dd_rescue dd_rescue.lzo > MD5.1
-	$(VG) ./dd_rescue -b 8k -L ./libddr_MD5.so=output,./libddr_lzo.so,./libddr_MD5.so=output dd_rescue.lzo dd_rescue.cmp > MD5.2
+	$(VG) ./dd_rescue -b16k -L ./libddr_MD5.dylib=output,./libddr_lzo.dylib,./libddr_MD5.dylib=output dd_rescue dd_rescue.lzo > MD5.1
+	$(VG) ./dd_rescue -b 8k -L ./libddr_MD5.dylib=output,./libddr_lzo.dylib,./libddr_MD5.dylib=output dd_rescue.lzo dd_rescue.cmp > MD5.2
 	cmp dd_rescue dd_rescue.cmp
-	md5sum dd_rescue dd_rescue.lzo
-	md5sum -c MD5.1
-	md5sum -c MD5.2
+	@PREFIX@/libexec/gnubin/md5sum dd_rescue dd_rescue.lzo
+	@PREFIX@/libexec/gnubin/md5sum -c MD5.1
+	@PREFIX@/libexec/gnubin/md5sum -c MD5.2
 	@rm -f dd_rescue.lzo dd_rescue.cmp MD5.1 MD5.2
 	# Sparse testing and MULTIPART testing and extend
 	$(VG) ./dd_rescue -ta -m 64k /dev/zero test
 	$(VG) ./dd_rescue -ax dd_rescue test
 	$(VG) ./dd_rescue -axm 128k /dev/zero test
-	$(VG) ./dd_rescue -taL ./libddr_MD5.so test test2
-	$(VG) ./dd_rescue -taL ./libddr_MD5.so=output,./libddr_lzo.so,./libddr_MD5.so=output test test.lzo > MD5
-	md5sum -c MD5
+	$(VG) ./dd_rescue -taL ./libddr_MD5.dylib test test2
+	$(VG) ./dd_rescue -taL ./libddr_MD5.dylib=output,./libddr_lzo.dylib,./libddr_MD5.dylib=output test test.lzo > MD5
+	@PREFIX@/libexec/gnubin/md5sum -c MD5
 	rm -f MD5 test2
-	$(VG) ./dd_rescue -axL ./libddr_lzo.so,./libddr_MD5.so=output dd_rescue test.lzo > MD5
+	$(VG) ./dd_rescue -axL ./libddr_lzo.dylib,./libddr_MD5.dylib=output dd_rescue test.lzo > MD5
 	#md5sum -c MD5
 	$(LZOP) -Nvl test.lzo
 	cat dd_rescue >> test
-	$(VG) ./dd_rescue -aL ./libddr_lzo.so,./libddr_MD5.so=output test.lzo test.cmp > MD5
-	md5sum -c MD5
+	$(VG) ./dd_rescue -aL ./libddr_lzo.dylib,./libddr_MD5.dylib=output test.lzo test.cmp > MD5
+	@PREFIX@/libexec/gnubin/md5sum -c MD5
 	cmp test test.cmp
-	for hash in md5 sha1 sha224 sha256 sha384 sha512; do $(VG) ./dd_rescue -b16k -TL ./libddr_lzo.so=compress,./libddr_hash.so=$$hash:outfd=1 dd_rescue dd_rescue.lzo > ddr.hash || exit 1; $${hash}sum -c ddr.hash || exit 2; done
+	for hash in md5 sha1 sha224 sha256 sha384 sha512; do $(VG) ./dd_rescue -b16k -TL ./libddr_lzo.dylib=compress,./libddr_hash.dylib=$$hash:outfd=1 dd_rescue dd_rescue.lzo > ddr.hash || exit 1; $${hash}sum -c ddr.hash || exit 2; done
 	rm -f MD5 test test.lzo test.cmp ddr.hash dd_rescue.lzo
 	
 check_lzo_algos: $(TARGETS)
-	for alg in lzo1x_1 lzo1x_1_11 lzo1x_1_12 lzo1x_1_15 lzo1x_999 lzo1y_1 lzo1y_999 lzo1f_1 lzo1f_999 lzo1b_1 lzo1b_2 lzo1b_3 lzo1b_4 lzo1b_5 lzo1b_6 lzo1b_7 lzo1b_8 lzo1b_9 lzo1b_99 lzo1b_999 lzo2a_999; do ./dd_rescue -qATL ./libddr_lzo.so=algo=$$alg:benchmark dd_rescue dd_rescue.lzo || exit 1; $(LZOP) -lt dd_rescue.lzo; ./dd_rescue -qATL ./libddr_lzo.so=benchmark dd_rescue.lzo dd_rescue.cmp || exit 2; cmp dd_rescue dd_rescue.cmp || exit 3; done
+	for alg in lzo1x_1 lzo1x_1_11 lzo1x_1_12 lzo1x_1_15 lzo1x_999 lzo1y_1 lzo1y_999 lzo1f_1 lzo1f_999 lzo1b_1 lzo1b_2 lzo1b_3 lzo1b_4 lzo1b_5 lzo1b_6 lzo1b_7 lzo1b_8 lzo1b_9 lzo1b_99 lzo1b_999 lzo2a_999; do ./dd_rescue -qATL ./libddr_lzo.dylib=algo=$$alg:benchmark dd_rescue dd_rescue.lzo || exit 1; $(LZOP) -lt dd_rescue.lzo; ./dd_rescue -qATL ./libddr_lzo.dylib=benchmark dd_rescue.lzo dd_rescue.cmp || exit 2; cmp dd_rescue dd_rescue.cmp || exit 3; done
 
 check_lzo_test: $(TARGETS)
 	find . -type f
@@ -748,21 +753,19 @@
 
 
 make_check_crypt: check_crypt
-	$(VG) ./dd_rescue -tp -L ./libddr_crypt.so=enc:keygen:keysfile:ivgen:ivsfile:alg=AES192+-CTR dd_rescue dd_rescue.enc
-	$(VG) ./dd_rescue -tp -L ./libddr_crypt.so=dec:keysfile:ivsfile:alg=AES192+-CTR dd_rescue.enc dd_rescue.dec
+	$(VG) ./dd_rescue -tp -L ./libddr_crypt.dylib=enc:keygen:keysfile:ivgen:ivsfile:alg=AES192+-CTR dd_rescue dd_rescue.enc
+	$(VG) ./dd_rescue -tp -L ./libddr_crypt.dylib=dec:keysfile:ivsfile:alg=AES192+-CTR dd_rescue.enc dd_rescue.dec
 	cmp dd_rescue dd_rescue.dec
 	# Reverse (CTR, ECB)
 	cp -p dd_rescue.enc dd_rescue.enc.orig
-	$(VG) ./dd_rescue -tpr -L ./libddr_crypt.so=enc:keysfile:ivsfile:alg=AES192+-CTR dd_rescue dd_rescue.enc
+	$(VG) ./dd_rescue -tpr -L ./libddr_crypt.dylib=enc:keysfile:ivsfile:alg=AES192+-CTR dd_rescue dd_rescue.enc
 	cmp dd_rescue.enc.orig dd_rescue.enc
-	$(VG) ./dd_rescue -tpr -L ./libddr_crypt.so=dec:keysfile:ivsfile:alg=AES192+-CTR dd_rescue.enc dd_rescue.dec
+	$(VG) ./dd_rescue -tpr -L ./libddr_crypt.dylib=dec:keysfile:ivsfile:alg=AES192+-CTR dd_rescue.enc dd_rescue.dec
 	cmp dd_rescue dd_rescue.dec
 	# Appending (CTR)
-	$(VG) ./dd_rescue -px -L ./libddr_crypt.so=enc:keysfile:ivsfile:alg=AES192+-CTR dd_rescue dd_rescue.enc
-	$(VG) ./dd_rescue -tp -L ./libddr_crypt.so=dec:keysfile:ivsfile:alg=AES192+-CTR dd_rescue.enc dd_rescue.dec
+	$(VG) ./dd_rescue -px -L ./libddr_crypt.dylib=enc:keysfile:ivsfile:alg=AES192+-CTR dd_rescue dd_rescue.enc
+	$(VG) ./dd_rescue -tp -L ./libddr_crypt.dylib=dec:keysfile:ivsfile:alg=AES192+-CTR dd_rescue.enc dd_rescue.dec
 	cat dd_rescue dd_rescue > dd_rescue2
 	cmp dd_rescue2 dd_rescue.dec
 	# Cleanup
 	rm -f dd_rescue2 dd_rescue.dec dd_rescue.enc
-
-

--- configure.ac.orig	2022-07-26 21:17:12.000000000 +0800
+++ configure.ac	2023-08-24 22:34:20.000000000 +0800
@@ -45,7 +45,7 @@
 CC_FLAGS_CHECK(-mrdrnd,RDRND)
 CC_FLAGS_CHECK(-maes,AES)
 
-CFLAGS="$CFLAGS -D_FORTIFY_SOURCE=2 -fPIE -pie -rdynamic"
+CFLAGS="$CFLAGS -D_FORTIFY_SOURCE=2 -fPIE"
 dnl ***************************************************************************
 dnl Check for support of rep nop
 AC_MSG_CHECKING(whether asm rep nop is supported)
