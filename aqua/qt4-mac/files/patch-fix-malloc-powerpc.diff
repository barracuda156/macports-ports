--- src/3rdparty/javascriptcore/JavaScriptCore/wtf/TCSystemAlloc.h.orig	2015-05-07 22:14:48.000000000 +0800
+++ src/3rdparty/javascriptcore/JavaScriptCore/wtf/TCSystemAlloc.h	2023-08-25 16:52:18.000000000 +0800
@@ -68,7 +68,7 @@
 inline void TCMalloc_SystemRelease(void*, size_t) { }
 #endif
 
-#if !HAVE(VIRTUALALLOC) && !HAVE(MADV_FREE_REUSE)
+#if !HAVE(VIRTUALALLOC) && !HAVE(MADV_FREE_REUSE) || defined(__POWERPC__)
 inline void TCMalloc_SystemCommit(void*, size_t) { }
 #endif
 
--- src/3rdparty/javascriptcore/JavaScriptCore/wtf/TCSystemAlloc.cpp.orig	2015-05-07 22:14:48.000000000 +0800
+++ src/3rdparty/javascriptcore/JavaScriptCore/wtf/TCSystemAlloc.cpp	2023-08-25 16:50:24.000000000 +0800
@@ -388,7 +388,7 @@
   return NULL;
 }
 
-#if HAVE(MADV_FREE_REUSE)
+#if HAVE(MADV_FREE_REUSE) && !defined(__POWERPC__)
 
 void TCMalloc_SystemRelease(void* start, size_t length)
 {
@@ -481,7 +481,7 @@
 
 #endif
 
-#if HAVE(MADV_FREE_REUSE)
+#if HAVE(MADV_FREE_REUSE) && !defined(__POWERPC__)
 
 void TCMalloc_SystemCommit(void* start, size_t length)
 {

--- src/3rdparty/javascriptcore/JavaScriptCore/wtf/FastMalloc.cpp.orig	2015-05-07 22:14:48.000000000 +0800
+++ src/3rdparty/javascriptcore/JavaScriptCore/wtf/FastMalloc.cpp	2023-08-25 16:49:57.000000000 +0800
@@ -407,7 +407,7 @@
 #include <wtf/HashSet.h>
 #include <wtf/Vector.h>
 #endif
-#if HAVE(DISPATCH_H)
+#if HAVE(DISPATCH_H) && !defined(__POWERPC__)
 #include <dispatch/dispatch.h>
 #endif
 
@@ -1397,7 +1397,7 @@
   void scavenge();
   ALWAYS_INLINE bool shouldContinueScavenging() const;
 
-#if !HAVE(DISPATCH_H)
+#if !HAVE(DISPATCH_H) || defined(__POWERPC__)
   static NO_RETURN void* runScavengerThread(void*);
   NO_RETURN void scavengerThread();
 
@@ -1448,7 +1448,7 @@
 
 #if USE_BACKGROUND_THREAD_TO_SCAVENGE_MEMORY
 
-#if !HAVE(DISPATCH_H)
+#if !HAVE(DISPATCH_H) || defined(__POWERPC__)
 
 void TCMalloc_PageHeap::initializeScavenger()
 {
@@ -2337,7 +2337,7 @@
 
 #if USE_BACKGROUND_THREAD_TO_SCAVENGE_MEMORY
 
-#if !HAVE(DISPATCH_H)
+#if !HAVE(DISPATCH_H) || defined(__POWERPC__)
 #if OS(WINDOWS)
 static void sleep(unsigned seconds)
 {
@@ -4374,7 +4374,7 @@
 malloc_introspection_t jscore_fastmalloc_introspection = { &FastMallocZone::enumerate, &FastMallocZone::goodSize, &FastMallocZone::check, &FastMallocZone::print,
     &FastMallocZone::log, &FastMallocZone::forceLock, &FastMallocZone::forceUnlock, &FastMallocZone::statistics
 
-#if !defined(BUILDING_ON_TIGER) && !defined(BUILDING_ON_LEOPARD) && !OS(IPHONE_OS)
+#if !defined(BUILDING_ON_TIGER) && !defined(BUILDING_ON_LEOPARD) && !OS(IPHONE_OS) && !defined(__POWERPC__)
     , 0 // zone_locked will not be called on the zone unless it advertises itself as version five or higher.
 #endif
 

--- src/3rdparty/webkit/Source/JavaScriptCore/wtf/TCSystemAlloc.h.orig	2015-05-07 22:14:45.000000000 +0800
+++ src/3rdparty/webkit/Source/JavaScriptCore/wtf/TCSystemAlloc.h	2023-08-25 18:05:46.000000000 +0800
@@ -68,7 +68,7 @@
 inline void TCMalloc_SystemRelease(void*, size_t) { }
 #endif
 
-#if !HAVE(VIRTUALALLOC) && !HAVE(MADV_FREE_REUSE)
+#if !HAVE(VIRTUALALLOC) && !HAVE(MADV_FREE_REUSE) || defined(__POWERPC__)
 inline void TCMalloc_SystemCommit(void*, size_t) { }
 #endif
 
--- src/3rdparty/webkit/Source/JavaScriptCore/wtf/TCSystemAlloc.cpp.orig	2015-05-07 22:14:45.000000000 +0800
+++ src/3rdparty/webkit/Source/JavaScriptCore/wtf/TCSystemAlloc.cpp	2023-08-25 18:03:58.000000000 +0800
@@ -388,7 +388,7 @@
   return NULL;
 }
 
-#if HAVE(MADV_FREE_REUSE)
+#if HAVE(MADV_FREE_REUSE) && !defined(__POWERPC__)
 
 void TCMalloc_SystemRelease(void* start, size_t length)
 {
@@ -481,7 +481,7 @@
 
 #endif
 
-#if HAVE(MADV_FREE_REUSE)
+#if HAVE(MADV_FREE_REUSE) && !defined(__POWERPC__)
 
 void TCMalloc_SystemCommit(void* start, size_t length)
 {

--- src/3rdparty/webkit/Source/JavaScriptCore/wtf/FastMalloc.cpp.orig	2023-08-25 14:57:32.000000000 +0800
+++ src/3rdparty/webkit/Source/JavaScriptCore/wtf/FastMalloc.cpp	2023-08-25 19:00:08.000000000 +0800
@@ -450,7 +450,7 @@
 #include "HeaderDetection.h"
 #endif
 
-#if HAVE(DISPATCH_H)
+#if HAVE(DISPATCH_H) && !defined(__POWERPC__)
 #include <dispatch/dispatch.h>
 #endif
 
@@ -1457,7 +1457,7 @@
   void scavenge();
   ALWAYS_INLINE bool shouldScavenge() const;
 
-#if HAVE(DISPATCH_H) || OS(WINDOWS)
+#if (HAVE(DISPATCH_H) && !defined(__POWERPC__)) || OS(WINDOWS)
   void periodicScavenge();
   ALWAYS_INLINE bool isScavengerSuspended();
   ALWAYS_INLINE void scheduleScavenger();
@@ -1465,7 +1465,7 @@
   ALWAYS_INLINE void suspendScavenger();
 #endif
 
-#if HAVE(DISPATCH_H)
+#if HAVE(DISPATCH_H) && !defined(__POWERPC__)
   dispatch_queue_t m_scavengeQueue;
   dispatch_source_t m_scavengeTimer;
   bool m_scavengingSuspended;
@@ -1517,7 +1517,7 @@
 
 #if USE_BACKGROUND_THREAD_TO_SCAVENGE_MEMORY
 
-#if HAVE(DISPATCH_H)
+#if HAVE(DISPATCH_H) && !defined(__POWERPC__)
 
 void TCMalloc_PageHeap::initializeScavenger()
 {
@@ -2462,7 +2462,7 @@
 
 #if USE_BACKGROUND_THREAD_TO_SCAVENGE_MEMORY
 
-#if HAVE(DISPATCH_H) || OS(WINDOWS)
+#if (HAVE(DISPATCH_H) && !defined(__POWERPC__)) || OS(WINDOWS)
 
 void TCMalloc_PageHeap::periodicScavenge()
 {
@@ -4612,7 +4612,7 @@
 malloc_introspection_t jscore_fastmalloc_introspection = { &FastMallocZone::enumerate, &FastMallocZone::goodSize, &FastMallocZone::check, &FastMallocZone::print,
     &FastMallocZone::log, &FastMallocZone::forceLock, &FastMallocZone::forceUnlock, &FastMallocZone::statistics
 
-#if !defined(BUILDING_ON_TIGER) && !defined(BUILDING_ON_LEOPARD)
+#if !defined(BUILDING_ON_TIGER) && !defined(BUILDING_ON_LEOPARD) && !defined(__POWERPC__)
     , 0 // zone_locked will not be called on the zone unless it advertises itself as version five or higher.
 #endif
 #if !defined(BUILDING_ON_TIGER) && !defined(BUILDING_ON_LEOPARD) && !defined(BUILDING_ON_SNOW_LEOPARD)

--- src/3rdparty/webkit/Source/JavaScriptCore/wtf/OSAllocatorPosix.cpp.orig	2023-08-25 14:57:32.000000000 +0800
+++ src/3rdparty/webkit/Source/JavaScriptCore/wtf/OSAllocatorPosix.cpp	2023-08-25 19:05:47.000000000 +0800
@@ -43,7 +43,7 @@
 #else // OS(QNX)
 
     void* result = reserveAndCommit(bytes, usage, writable, executable);
-#if HAVE(MADV_FREE_REUSE)
+#if HAVE(MADV_FREE_REUSE) && !defined(__POWERPC__)
     // To support the "reserve then commit" model, we have to initially decommit.
     while (madvise(result, bytes, MADV_FREE_REUSABLE) == -1 && errno == EAGAIN) { }
 #endif
@@ -118,7 +118,7 @@
         protection |= PROT_EXEC;
     if (MAP_FAILED == mmap(address, bytes, protection, MAP_FIXED | MAP_PRIVATE | MAP_ANON, -1, 0))
         CRASH();
-#elif HAVE(MADV_FREE_REUSE)
+#elif HAVE(MADV_FREE_REUSE) && !defined(__POWERPC__)
     UNUSED_PARAM(writable);
     UNUSED_PARAM(executable);
     while (madvise(address, bytes, MADV_FREE_REUSE) == -1 && errno == EAGAIN) { }
@@ -136,7 +136,7 @@
 #if OS(QNX)
     // Use PROT_NONE and MAP_LAZY to decommit the pages.
     mmap(address, bytes, PROT_NONE, MAP_FIXED | MAP_LAZY | MAP_PRIVATE | MAP_ANON, -1, 0);
-#elif HAVE(MADV_FREE_REUSE)
+#elif HAVE(MADV_FREE_REUSE) && !defined(__POWERPC__)
     while (madvise(address, bytes, MADV_FREE_REUSABLE) == -1 && errno == EAGAIN) { }
 #elif HAVE(MADV_FREE)
     while (madvise(address, bytes, MADV_FREE) == -1 && errno == EAGAIN) { }
