From 5ae125bf2c23f2efada5d2d686a604fb0a0e778e Mon Sep 17 00:00:00 2001
From: NucleaPeon <initial.dann@gmail.com>
Date: Sun, 25 Dec 2022 19:19:52 -0700
Subject: [PATCH 4/7] Removed foreach loops in favor of for    
 https://forum.qt.io/topic/121528/compilation-of-qt5-3-1-on-ubuntu-20-04-1

./configure allows mawk
---
 qtbase/configure                              |  2 +-
 qtbase/qmake/library/qmakeevaluator.cpp       |  4 ++-
 qtbase/src/tools/moc/generator.cpp            |  4 ++-
 qtbase/src/tools/moc/main.cpp                 | 27 ++++++++++++-------
 .../src/tools/qdbusxml2cpp/qdbusxml2cpp.cpp   |  9 ++++---
 .../tools/uic/cpp/cppwriteinitialization.cpp  | 16 +++++++----
 6 files changed, 42 insertions(+), 20 deletions(-)

diff --git qtbase/configure qtbase/configure
index cb8d78fd3..f9ecca414 100755
--- qtbase/configure
+++ qtbase/configure
@@ -62,7 +62,7 @@ PERL=`$WHICH perl 2>/dev/null`
 
 # find out which awk we want to use, prefer gawk, then nawk, then regular awk
 AWK=
-for e in gawk nawk awk; do
+for e in mawk gawk nawk awk; do
     if "$WHICH" $e >/dev/null 2>&1 && ( $e -f /dev/null /dev/null ) >/dev/null 2>&1; then
         AWK=$e
         break
diff --git qtbase/qmake/library/qmakeevaluator.cpp qtbase/qmake/library/qmakeevaluator.cpp
index 8e1296e1e..13cd8ea17 100644
--- qtbase/qmake/library/qmakeevaluator.cpp
+++ qtbase/qmake/library/qmakeevaluator.cpp
@@ -1503,9 +1503,11 @@ void QMakeEvaluator::updateFeaturePaths()
     feature_roots.removeDuplicates();
 
     QStringList ret;
-    foreach (const QString &root, feature_roots)
+    for (int i=0; i<feature_roots.length(); ++i) {
+        const QString &root = feature_roots.at(i);
         if (IoUtils::exists(root))
             ret << root;
+    }
     m_featureRoots = new QMakeFeatureRoots(ret);
 }
 
diff --git qtbase/src/tools/moc/generator.cpp qtbase/src/tools/moc/generator.cpp
index a67ea0595..5f1b28048 100644
--- qtbase/src/tools/moc/generator.cpp
+++ qtbase/src/tools/moc/generator.cpp
@@ -1510,8 +1510,10 @@ void Generator::generatePluginMetaData()
     data.insert(QStringLiteral("MetaData"), cdef->pluginData.metaData.object());
 
     // Add -M args from the command line:
-    foreach (const QString &key, cdef->pluginData.metaArgs.keys())
+    for (int i=0; i<cdef->pluginData.metaArgs.keys().length(); ++i) {
+        const QString &key = cdef->pluginData.metaArgs.keys().at(i);
         data.insert(key, cdef->pluginData.metaArgs.value(key));
+    }
 
     fputs("\nQT_PLUGIN_METADATA_SECTION const uint qt_section_alignment_dummy = 42;\n\n"
           "#ifdef QT_NO_DEBUG\n", out);
diff --git qtbase/src/tools/moc/main.cpp qtbase/src/tools/moc/main.cpp
index bdeb5477a..cc4488680 100644
--- qtbase/src/tools/moc/main.cpp
+++ qtbase/src/tools/moc/main.cpp
@@ -154,8 +154,8 @@ static QStringList argumentsFromCommandLineAndFile(const QStringList &arguments)
 {
     QStringList allArguments;
     allArguments.reserve(arguments.size());
-    foreach (const QString &argument, arguments) {
-        // "@file" doesn't start with a '-' so we can't use QCommandLineParser for it
+    for (int i=0; i<arguments.length(); ++i) {
+    	const QString &argument = arguments.at(i);
         if (argument.startsWith(QLatin1Char('@'))) {
             QString optionsFile = argument;
             optionsFile.remove(0, 1);
@@ -312,25 +312,32 @@ int runMoc(int argc, char **argv)
         if (parser.isSet(forceIncludeOption)) {
             moc.noInclude = false;
             autoInclude = false;
-            foreach (const QString &include, parser.values(forceIncludeOption)) {
+            for (int i=0; i<parser.values(forceIncludeOption).length(); ++i) {
+                const QString &include = parser.values(forceIncludeOption).at(i);
                 moc.includeFiles.append(QFile::encodeName(include));
                 defaultInclude = false;
              }
         }
-        foreach (const QString &include, parser.values(prependIncludeOption))
+        for (int i=0; i<parser.values(prependIncludeOption).length(); ++i) {
+            const QString &include = parser.values(prependIncludeOption).at(i);
             moc.includeFiles.prepend(QFile::encodeName(include));
         if (parser.isSet(pathPrefixOption))
             moc.includePath = QFile::encodeName(parser.value(pathPrefixOption));
     }
-    foreach (const QString &path, parser.values(includePathOption))
+    int i = 0;
+    for (i=0; i<parser.values(includePathOption).length(); ++i) {
+        const QString path = parser.values(includePathOption).at(i);
         pp.includes += Preprocessor::IncludePath(QFile::encodeName(path));
-    foreach (const QString &path, parser.values(macFrameworkOption)) {
+    }
+    for (i=0; i<parser.values(macFrameworkOption).length(); ++i) {
+        const QString &path = parser.values(macFrameworkOption).at(i);
         // minimalistic framework support for the mac
         Preprocessor::IncludePath p(QFile::encodeName(path));
         p.isFrameworkPath = true;
         pp.includes += p;
     }
-    foreach (const QString &arg, parser.values(defineOption)) {
+    for (i=0; i<parser.values(defineOption).length(); ++i) {
+        const QString &arg = parser.values(defineOption).at(i);
         QByteArray name = arg.toLocal8Bit();
         QByteArray value("1");
         int eq = name.indexOf('=');
@@ -347,7 +354,8 @@ int runMoc(int argc, char **argv)
         macro.symbols.removeLast(); // remove the EOF symbol
         pp.macros.insert(name, macro);
     }
-    foreach (const QString &arg, parser.values(undefineOption)) {
+    for (i=0; i<parser.values(undefineOption).length(); ++i) {
+        const QString &arg = parser.values(undefineOption).at(i);
         QByteArray macro = arg.toLocal8Bit();
         if (macro.isEmpty()) {
             error("Missing macro name");
@@ -392,7 +400,8 @@ int runMoc(int argc, char **argv)
         moc.filename = filename.toLocal8Bit();
     }
 
-    foreach (const QString &md, parser.values(metadataOption)) {
+    for (i=0; i<parser.values(metadataOption).length(); ++i) {
+        const QString &md = parser.values(metadataOption).at(i);
         int split = md.indexOf(QLatin1Char('='));
         QString key = md.left(split);
         QString value = md.mid(split + 1);
diff --git qtbase/src/tools/qdbusxml2cpp/qdbusxml2cpp.cpp qtbase/src/tools/qdbusxml2cpp/qdbusxml2cpp.cpp
index b4f9aedd7..b1e9cd1c4 100644
--- qtbase/src/tools/qdbusxml2cpp/qdbusxml2cpp.cpp
+++ qtbase/src/tools/qdbusxml2cpp/qdbusxml2cpp.cpp
@@ -327,7 +327,8 @@ static QString classNameForInterface(const QString &interface, ClassType classTy
 
     QString retval;
     if (classType == Proxy)
-        foreach (QString part, parts) {
+        for (int i=0; i<parts.length(); ++i) }
+            QString part = parts.at(i);
             part[0] = part[0].toUpper();
             retval += part;
         }
@@ -571,7 +572,8 @@ static void writeProxy(const QString &filename, const QDBusIntrospection::Interf
        << includeList
        << "#include <QtDBus/QtDBus>" << endl;
 
-    foreach (const QString &include, includes) {
+    for (int i=0; i<includes.length(); ++i) {
+        const QString &include = includes.at(i);
         hs << "#include \"" << include << "\"" << endl;
         if (headerName.isEmpty())
             cs << "#include \"" << include << "\"" << endl;
@@ -881,7 +883,8 @@ static void writeAdaptor(const QString &filename, const QDBusIntrospection::Inte
            << "#include <QtCore/QVariant>" << endl;
     hs << "#include <QtDBus/QtDBus>" << endl;
 
-    foreach (const QString &include, includes) {
+    for (int i=0; i<includes.length(); ++i) {
+        const QString &include = includes.at(i);
         hs << "#include \"" << include << "\"" << endl;
         if (headerName.isEmpty())
             cs << "#include \"" << include << "\"" << endl;
diff --git qtbase/src/tools/uic/cpp/cppwriteinitialization.cpp qtbase/src/tools/uic/cpp/cppwriteinitialization.cpp
index 9b1903b13..719a57177 100644
--- qtbase/src/tools/uic/cpp/cppwriteinitialization.cpp
+++ qtbase/src/tools/uic/cpp/cppwriteinitialization.cpp
@@ -802,7 +802,8 @@ void WriteInitialization::acceptWidget(DomWidget *node)
     if (m_uic->customWidgetsInfo()->extends(className, QLatin1String("QTreeView"))
                || m_uic->customWidgetsInfo()->extends(className, QLatin1String("QTreeWidget"))) {
         DomPropertyList headerProperties;
-        foreach (const QString &realPropertyName, realPropertyNames) {
+        for (int i=0; i<realPropertyNames.length(); ++i) {
+            const QString &realPropertyName = realPropertyNames.at(i);
             const QString upperPropertyName = realPropertyName.at(0).toUpper()
                                               + realPropertyName.mid(1);
             const QString fakePropertyName = QLatin1String("header") + upperPropertyName;
@@ -821,9 +822,11 @@ void WriteInitialization::acceptWidget(DomWidget *node)
                 (QStringList() << QLatin1String("horizontalHeader")
                                << QLatin1String("verticalHeader"));
 
-        foreach (const QString &headerPrefix, headerPrefixes) {
+        for (int i=0; i<headerPrefixes.length(); ++i) {
+            const QString &headerPrefix = headerPrefixes.at(i);
             DomPropertyList headerProperties;
-            foreach (const QString &realPropertyName, realPropertyNames) {
+            for (int j=0; j<realPropertyNames.length(); ++j) {
+                const QString &realPropertyName = realPropertyNames.at(j);
                 const QString upperPropertyName = realPropertyName.at(0).toUpper()
                                                   + realPropertyName.mid(1);
                 const QString fakePropertyName = headerPrefix + upperPropertyName;
@@ -2496,8 +2499,10 @@ static void generateMultiDirectiveBegin(QTextStream &outputStream, const QSet<QS
         return;
 
     QMap<QString, bool> map; // bool is dummy. The idea is to sort that (always generate in the same order) by putting a set into a map
-    foreach (const QString &str, directives)
+    for (int i=0; i<directives.length(); ++i) {
+        const QString &str = directives.at(i);
         map.insert(str, true);
+    }
 
     if (map.size() == 1) {
         outputStream << "#ifndef " << map.constBegin().key() << endl;
@@ -2506,7 +2511,8 @@ static void generateMultiDirectiveBegin(QTextStream &outputStream, const QSet<QS
 
     outputStream << "#if";
     bool doOr = false;
-    foreach (const QString &str, map.keys()) {
+    for (int i=0; i<map.keys().length(); ++i) {
+        const QString &str = map.keys().at(i);
         if (doOr)
             outputStream << " ||";
         outputStream << " !defined(" << str << ')';
