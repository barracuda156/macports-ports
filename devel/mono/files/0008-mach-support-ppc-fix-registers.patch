From 4635c39c52e2aa325e0d804b9038a1345d3b4bef Mon Sep 17 00:00:00 2001
From: Sergey Fedorov <vital.had@gmail.com>
Date: Sun, 7 May 2023 09:20:26 +0800
Subject: [PATCH 8/9] mach-support-ppc*: fix registers

---
 mono/utils/mach-support-ppc.c   | 51 ++++++++++++++++++++++++++++-----
 mono/utils/mach-support-ppc64.c | 51 ++++++++++++++++++++++++++++-----
 2 files changed, 88 insertions(+), 14 deletions(-)

diff --git mono/utils/mach-support-ppc.c mono/utils/mach-support-ppc.c
index 56b183784e8..65248034c2c 100644
--- mono/utils/mach-support-ppc.c
+++ mono/utils/mach-support-ppc.c
@@ -8,6 +8,10 @@
  * (C) 2023 Xamarin, Inc.
  */
 
+/* The code below assumes 10.5.x or 10.6.x (10A190 or Rosetta).
+ * Tiger will likely need some changes, if at all can be supported.
+ */
+
 #include <config.h>
 
 #if defined(__MACH__)
@@ -18,6 +22,9 @@
 #include "utils/mono-compiler.h"
 #include "mach-support.h"
 
+// For reg numbers
+#include <mono/arch/ppc/ppc-codegen.h>
+
 int
 mono_mach_arch_get_mcontext_size ()
 {
@@ -49,14 +56,44 @@ mono_mach_arch_mcontext_to_thread_states (void *context, thread_state_t state, t
 void
 mono_mach_arch_thread_states_to_mono_context (thread_state_t state, thread_state_t fpstate, MonoContext *context)
 {
-	int i;
 	ppc_thread_state_t *arch_state = (ppc_thread_state_t *) state;
-	for (i = 0; i < 32; ++i)
-		context->regs [i] = arch_state->__r[i];
-
-	context->pc = arch_state->__srr0;	/* Instruction address register (PC) */
-	context->lr = arch_state->__lr;	/* Link register */
-	/* Do we need the rest? */
+	ppc_float_state_t *arch_fpstate = (ppc_float_state_t *) fpstate;
+	context->sc_ir = arch_state->__srr0;
+	context->sc_sp = arch_state->__r1;
+	context->regs[ppc_r0] = arch_state->__r0;
+	context->regs[ppc_r1] = arch_state->__r1;
+	context->regs[ppc_r2] = arch_state->__r2;
+	context->regs[ppc_r3] = arch_state->__r3;
+	context->regs[ppc_r4] = arch_state->__r4;
+	context->regs[ppc_r5] = arch_state->__r5;
+	context->regs[ppc_r6] = arch_state->__r6;
+	context->regs[ppc_r7] = arch_state->__r7;
+	context->regs[ppc_r8] = arch_state->__r8;
+	context->regs[ppc_r9] = arch_state->__r9;
+	context->regs[ppc_r10] = arch_state->__r10;
+	context->regs[ppc_r11] = arch_state->__r11;
+	context->regs[ppc_r12] = arch_state->__r12;
+	context->regs[ppc_r13] = arch_state->__r13;
+	context->regs[ppc_r14] = arch_state->__r14;
+	context->regs[ppc_r15] = arch_state->__r15;
+	context->regs[ppc_r16] = arch_state->__r16;
+	context->regs[ppc_r17] = arch_state->__r17;
+	context->regs[ppc_r18] = arch_state->__r18;
+	context->regs[ppc_r19] = arch_state->__r19;
+	context->regs[ppc_r20] = arch_state->__r20;
+	context->regs[ppc_r21] = arch_state->__r21;
+	context->regs[ppc_r22] = arch_state->__r22;
+	context->regs[ppc_r23] = arch_state->__r23;
+	context->regs[ppc_r24] = arch_state->__r24;
+	context->regs[ppc_r25] = arch_state->__r25;
+	context->regs[ppc_r26] = arch_state->__r26;
+	context->regs[ppc_r27] = arch_state->__r27;
+	context->regs[ppc_r28] = arch_state->__r28;
+	context->regs[ppc_r29] = arch_state->__r29;
+	context->regs[ppc_r30] = arch_state->__r30;
+	context->regs[ppc_r31] = arch_state->__r31;
+	for (int i = 0; i < 32; ++i)
+		context->fregs [i] = arch_fpstate->__fpregs [i];
 }
 
 int
diff --git mono/utils/mach-support-ppc64.c mono/utils/mach-support-ppc64.c
index 6a256d81a4f..49110b06e89 100644
--- mono/utils/mach-support-ppc64.c
+++ mono/utils/mach-support-ppc64.c
@@ -8,6 +8,10 @@
  * (C) 2023 Xamarin, Inc.
  */
 
+/* The code below assumes 10.5.x.
+ * Tiger will likely need some changes, if at all can be supported.
+ */
+
 #include <config.h>
 
 #if defined(__MACH__)
@@ -18,6 +22,9 @@
 #include "utils/mono-compiler.h"
 #include "mach-support.h"
 
+// For reg numbers
+#include <mono/arch/ppc/ppc-codegen.h>
+
 int
 mono_mach_arch_get_mcontext_size ()
 {
@@ -49,14 +56,44 @@ mono_mach_arch_mcontext_to_thread_states (void *context, thread_state_t state, t
 void
 mono_mach_arch_thread_states_to_mono_context (thread_state_t state, thread_state_t fpstate, MonoContext *context)
 {
-	int i;
 	ppc_thread_state64_t *arch_state = (ppc_thread_state64_t *) state;
-	for (i = 0; i < 32; ++i)
-		context->regs [i] = arch_state->__r[i];
-
-	context->pc = arch_state->__srr0;	/* Instruction address register (PC) */
-	context->lr = arch_state->__lr;	/* Link register */
-	/* Do we need the rest? */
+	ppc_float_state_t *arch_fpstate = (ppc_float_state_t *) fpstate;
+	context->sc_ir = arch_state->__srr0;
+	context->sc_sp = arch_state->__r1;
+	context->regs[ppc_r0] = arch_state->__r0;
+	context->regs[ppc_r1] = arch_state->__r1;
+	context->regs[ppc_r2] = arch_state->__r2;
+	context->regs[ppc_r3] = arch_state->__r3;
+	context->regs[ppc_r4] = arch_state->__r4;
+	context->regs[ppc_r5] = arch_state->__r5;
+	context->regs[ppc_r6] = arch_state->__r6;
+	context->regs[ppc_r7] = arch_state->__r7;
+	context->regs[ppc_r8] = arch_state->__r8;
+	context->regs[ppc_r9] = arch_state->__r9;
+	context->regs[ppc_r10] = arch_state->__r10;
+	context->regs[ppc_r11] = arch_state->__r11;
+	context->regs[ppc_r12] = arch_state->__r12;
+	context->regs[ppc_r13] = arch_state->__r13;
+	context->regs[ppc_r14] = arch_state->__r14;
+	context->regs[ppc_r15] = arch_state->__r15;
+	context->regs[ppc_r16] = arch_state->__r16;
+	context->regs[ppc_r17] = arch_state->__r17;
+	context->regs[ppc_r18] = arch_state->__r18;
+	context->regs[ppc_r19] = arch_state->__r19;
+	context->regs[ppc_r20] = arch_state->__r20;
+	context->regs[ppc_r21] = arch_state->__r21;
+	context->regs[ppc_r22] = arch_state->__r22;
+	context->regs[ppc_r23] = arch_state->__r23;
+	context->regs[ppc_r24] = arch_state->__r24;
+	context->regs[ppc_r25] = arch_state->__r25;
+	context->regs[ppc_r26] = arch_state->__r26;
+	context->regs[ppc_r27] = arch_state->__r27;
+	context->regs[ppc_r28] = arch_state->__r28;
+	context->regs[ppc_r29] = arch_state->__r29;
+	context->regs[ppc_r30] = arch_state->__r30;
+	context->regs[ppc_r31] = arch_state->__r31;
+	for (int i = 0; i < 32; ++i)
+		context->fregs [i] = arch_fpstate->__fpregs [i];
 }
 
 int
-- 
2.40.1

