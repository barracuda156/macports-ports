From 52174c4b57d7acda85f80de189c86606f7b3d0fb Mon Sep 17 00:00:00 2001
From: barracuda156 <vital.had@gmail.com>
Date: Sat, 4 Nov 2023 16:03:24 +0800
Subject: [PATCH 18/18] Do not try using unsupported simd

---
 .../backend/ppc/instruction-scheduler-ppc.cc       |  8 +++++---
 .../backend/ppc/instruction-selector-ppc.cc        | 14 ++++++++++++++
 2 files changed, 19 insertions(+), 3 deletions(-)

diff --git deps/v8/src/compiler/backend/ppc/instruction-scheduler-ppc.cc deps/v8/src/src/compiler/backend/ppc/instruction-scheduler-ppc.cc
index c1a3c2cd4e1..284e5fdddad 100644
--- deps/v8/src/src/compiler/backend/ppc/instruction-scheduler-ppc.cc
+++ deps/v8/src/src/compiler/backend/ppc/instruction-scheduler-ppc.cc
@@ -113,8 +113,6 @@ int InstructionScheduler::GetTargetInstructionFlags(
     case kPPC_CompressSigned:
     case kPPC_CompressPointer:
     case kPPC_CompressAny:
-    case kPPC_F64x2Splat:
-    case kPPC_F64x2ExtractLane:
     case kPPC_F32x4Splat:
     case kPPC_F32x4ExtractLane:
     case kPPC_I64x2Splat:
@@ -123,10 +121,14 @@ int InstructionScheduler::GetTargetInstructionFlags(
     case kPPC_I32x4ExtractLane:
     case kPPC_I16x8Splat:
     case kPPC_I16x8ExtractLaneU:
-    case kPPC_I16x8ExtractLaneS:
     case kPPC_I8x16Splat:
     case kPPC_I8x16ExtractLaneU:
+#ifdef V8_TARGET_ARCH_PPC64
+    case kPPC_F64x2Splat:
+    case kPPC_F64x2ExtractLane:
+    case kPPC_I16x8ExtractLaneS:
     case kPPC_I8x16ExtractLaneS:
+#endif
       return kNoOpcodeFlags;
 
     case kPPC_LoadWordS8:
diff --git deps/v8/src/src/compiler/backend/ppc/instruction-selector-ppc.cc deps/v8/src/src/compiler/backend/ppc/instruction-selector-ppc.cc
index 8b47cbf626b..5f45038f843 100644
--- deps/v8/src/src/compiler/backend/ppc/instruction-selector-ppc.cc
+++ deps/v8/src/src/compiler/backend/ppc/instruction-selector-ppc.cc
@@ -2168,12 +2168,20 @@ void InstructionSelector::VisitInt64AbsWithOverflow(Node* node) {
   UNREACHABLE();
 }
 
+#ifdef V8_TARGET_ARCH_PPC64
 #define SIMD_TYPES(V) \
   V(F64x2)            \
   V(F32x4)            \
   V(I32x4)            \
   V(I16x8)            \
   V(I8x16)
+#else
+#define SIMD_TYPES(V) \
+  V(F32x4)            \
+  V(I32x4)            \
+  V(I16x8)            \
+  V(I8x16)
+#endif
 
 #define SIMD_VISIT_SPLAT(Type)                               \
   void InstructionSelector::Visit##Type##Splat(Node* node) { \
@@ -2192,13 +2200,19 @@ SIMD_TYPES(SIMD_VISIT_SPLAT)
     Emit(kPPC_##Type##ExtractLane##Sign, g.DefineAsRegister(node),       \
          g.UseRegister(node->InputAt(0)), g.UseImmediate(lane));         \
   }
+#ifdef V8_TARGET_ARCH_PPC64
 SIMD_VISIT_EXTRACT_LANE(F64x2, )
+#endif
 SIMD_VISIT_EXTRACT_LANE(F32x4, )
 SIMD_VISIT_EXTRACT_LANE(I32x4, )
 SIMD_VISIT_EXTRACT_LANE(I16x8, U)
+#ifdef V8_TARGET_ARCH_PPC64
 SIMD_VISIT_EXTRACT_LANE(I16x8, S)
+#endif
 SIMD_VISIT_EXTRACT_LANE(I8x16, U)
+#ifdef V8_TARGET_ARCH_PPC64
 SIMD_VISIT_EXTRACT_LANE(I8x16, S)
+#endif
 #undef SIMD_VISIT_EXTRACT_LANE
 
 void InstructionSelector::VisitI32x4ReplaceLane(Node* node) { UNIMPLEMENTED(); }
